package com.rotinom.remit;

import java.util.ArrayList;
import java.util.List;

import com.parse.FindCallback;
import com.parse.Parse;
import com.parse.ParseACL;
import com.parse.ParseAnalytics;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;
import com.parse.SignUpCallback;
import com.rotinom.remit.dialogs.ChooseCrnActivity;

import android.os.Bundle;
import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class MainActivity extends Activity {
	
	
	protected ParseObject today_;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
        
        ParseHelper ph = ParseHelper.instance(this.getApplicationContext());
        
        
        // See if we need to sign up
        if (null == ParseUser.getCurrentUser()) {

        	String username = "rotinom";
        	String password = "abc123";
        	String email    = "rotinom@gmail.com";
        	
        	
        	// Try to log in
        	ParseUser user = null;
        	boolean mustRegister = false;
			try {
				user = ParseUser.logIn(username, password);
			} 
			catch (ParseException e1) {
				mustRegister = true;
				e1.printStackTrace();
			}
        	
        	// Log in failed
        	if(null == user || mustRegister) {
        		user = new ParseUser();
        		
        		// Set the parameters
            	user.setUsername(username);
            	user.setPassword(password);
            	user.setEmail(email);
            	
            	//Sign up for a new account
            	user.signUpInBackground(new SignUpCallback() {
            		public void done(ParseException e) {
            			if (e == null) {
            				Toast.makeText(MainActivity.this, "Signing up", Toast.LENGTH_SHORT).show();
            				ParseACL.setDefaultACL(new ParseACL(ParseUser.getCurrentUser()), true);
            			} 
            			else {
            				Toast.makeText(MainActivity.this, "Signup failed", Toast.LENGTH_SHORT).show();
            			}
            		}
            	});
        	}

        }
        
    	Toast.makeText(MainActivity.this, "Setting the default ACL", Toast.LENGTH_SHORT).show();
    	ParseACL.setDefaultACL(new ParseACL(ParseUser.getCurrentUser()), true);
    	
    	
    	
    	// Get the date object for the current date (today)
    	ParseQuery<ParseObject> query = ParseQuery.getQuery("Day");
    	query.whereEqualTo("date", today);
    	List<ParseObject> results = query.find();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
    	switch (item.getItemId()) {
    		case R.id.add_number:
    			Toast.makeText(this, "Add CRN Selected", Toast.LENGTH_SHORT).show();
    			addCrn();
    			break;
    		case R.id.back_one_week:
    			Toast.makeText(this, "Going back one week", Toast.LENGTH_SHORT).show();
    			break;
       		case R.id.fwd_one_week:
    			Toast.makeText(this, "Going forward one week", Toast.LENGTH_SHORT).show();
    			break;
       		case R.id.menu_item_cal:
    			Toast.makeText(this, "Showing Calendar", Toast.LENGTH_SHORT).show();
    			
    			Intent intent = new Intent(this, CalendarActivity.class);
    	        startActivity(intent);
    			break;
    		default:
    			break;
    	}
    	return true;
    }
    
    
    /**
     * Show the "add charge number" dialog
     */
    protected void addCrn(){
        Intent intent = new Intent(this, ChooseCrnActivity.class);
        startActivity(intent);
        

        
        
//    	final Dialog dialog = new Dialog(this);
//        dialog.setContentView(R.layout.dialog_add_crn);
//        dialog.setTitle("Add Charge Number");
//        
//        // Get the CRN AutoComplete field
//        final AutoCompleteTextView crn_et = 
//        		(AutoCompleteTextView)dialog.findViewById(R.id.edit_crn_number);
//        
//        // Hook up an adapter to it
//        final List<String> crn_numbers = new ArrayList<String>();
//        ArrayAdapter<String> default_adapter = 
//        		new ArrayAdapter<String>(this, R.id.edit_crn_number, crn_numbers);
//        
//        crn_et.setAdapter(default_adapter);
//        crn_et.setThreshold(2);
//
//        
//        // Add a text changed listener
//        crn_et.addTextChangedListener(new TextWatcher(){
//
//			@Override
//			public void afterTextChanged(Editable arg0) {
//				String str = arg0.toString();
//				
//				// Don't search if we only have a few characters
//				if(str.length() < 2){
//					return;
//				}
//				
//				// TODO Auto-generated method stub
//				ParseQuery<ParseObject> query = ParseQuery.getQuery("CRN");
//				query.whereStartsWith("crn", str);
//				
//				query.findInBackground(new FindCallback<ParseObject>(){
//					@Override
//					public void done(List<ParseObject> objects, ParseException e) {
//						crn_numbers.clear();
//						for(ParseObject obj : objects){
//							String crn = obj.getString("crn");
//							Log.d("CrnTextWatcher", "Grabbed crn: " + crn);
//							crn_numbers.add(crn);
//						}
//						ArrayAdapter<String> adapter = 
//				        		new ArrayAdapter<String>(
//				        				MainActivity.this, 
//				        				R.id.edit_crn_number, 
//				        				crn_numbers);
//						crn_et.setAdapter(adapter);
//						adapter.notifyDataSetChanged();
//					}
//					
//				});
//			}
//
//			@Override
//			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {}
//
//			@Override
//			public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {}
//        	
//        });
//        
//        final EditText desc_et = 
//        		(EditText)dialog.findViewById(R.id.edit_crn_desc);
//        
//
//        
//        // Set up add button click handlers
//        Button add_button = (Button)dialog.findViewById(R.id.add_crn_button);
//        add_button.setOnClickListener(new View.OnClickListener() 
//        {
//			@Override
//			public void onClick(View v) {
//				Toast.makeText(MainActivity.this, "Adding CRN to list", Toast.LENGTH_SHORT).show();
//			}
//            // Perform button logic
//        });
//        
//        
//        Button create_button = (Button)dialog.findViewById(R.id.create_crn_button);
//        create_button.setOnClickListener(new View.OnClickListener() 
//        {
//			@Override
//			public void onClick(View v) {
//				Toast.makeText(MainActivity.this, "Creating new CRN and adding to list", Toast.LENGTH_SHORT).show();
//				
//				if(!checkForDialogErrors(dialog)){
//					return;
//				}
//				
//
//				
//				ParseObject po = new ParseObject("CRN");
//				po.put("crn", crn_et.getText().toString());
//				po.put("description", desc_et.getText().toString());
//				po.put("archived", false);
//				po.put("favorite", true);
//				
//				try {
//					po.save();
//				} catch (ParseException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				dialog.cancel();
//			}
//            // Perform button logic
//        });
        
        
//        dialog.show();
    }


}
